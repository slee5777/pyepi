[
  {
    "objectID": "moving_averages.html",
    "href": "moving_averages.html",
    "title": "Moving Average",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style"
  },
  {
    "objectID": "moving_averages.html#set-up",
    "href": "moving_averages.html#set-up",
    "title": "Moving Average",
    "section": "Set up",
    "text": "Set up\nTo use colourbind colour schemes (optional). To get the color, see https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/mpl-data/stylelib/tableau-colorblind10.mplstyle\n\nstyle.use('tableau-colorblind10')"
  },
  {
    "objectID": "moving_averages.html#data",
    "href": "moving_averages.html#data",
    "title": "Moving Average",
    "section": "Data",
    "text": "Data\nImport data from https://github.com/appliedepi/epiRhandbook_eng/blob/master/data/linelist_cleaned.xlsx and then save under “epiRhandbook_data” folder.\nNote: Installation of “openpyxl” is required.\n\nlinelist = pd.read_excel('epiRhandbook_data/linelist_cleaned.xlsx')\n\n\nNo_of_line_display = 5\nlinelist.head(No_of_line_display)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date_onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      age\n      age_unit\n      age_years\n      age_cat\n      age_cat5\n      hospital\n      lon\n      lat\n      infector\n      source\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      bmi\n      days_onset_hosp\n    \n  \n  \n    \n      0\n      5fe599\n      4\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      2.0\n      years\n      2.0\n      0-4\n      0-4\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      27\n      48\n      22\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      117.187500\n      2.0\n    \n    \n      1\n      8689b7\n      4\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Missing\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      25\n      59\n      22\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      71.818443\n      1.0\n    \n    \n      2\n      11f8ea\n      2\n      NaT\n      2014-05-16\n      2014-05-18\n      2014-05-30\n      Recover\n      m\n      56.0\n      years\n      56.0\n      50-69\n      55-59\n      St. Mark's Maternity Hospital (SMMH)\n      -13.212911\n      8.464817\n      NaN\n      NaN\n      91\n      238\n      21\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      16:48\n      16.065250\n      2.0\n    \n    \n      3\n      b8812a\n      3\n      2014-05-04\n      2014-05-18\n      2014-05-20\n      NaT\n      NaN\n      f\n      18.0\n      years\n      18.0\n      15-19\n      15-19\n      Port Hospital\n      -13.236371\n      8.475476\n      f90f5f\n      other\n      41\n      135\n      23\n      no\n      no\n      no\n      no\n      no\n      36.8\n      11:22\n      22.496571\n      2.0\n    \n    \n      4\n      893f25\n      3\n      2014-05-18\n      2014-05-21\n      2014-05-22\n      2014-05-29\n      Recover\n      m\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Military Hospital\n      -13.222864\n      8.460824\n      11f8ea\n      other\n      36\n      71\n      23\n      no\n      no\n      yes\n      no\n      yes\n      36.9\n      12:60\n      71.414402\n      1.0\n    \n  \n\n\n\n\n\nBrowse data\n\ndf_date_hosp = pd.DataFrame(list(zip(linelist['date_hospitalisation'], linelist['case_id'])), columns=['date_hospitalisation', 'case_id'])\ndf_date_hosp\n\n\n\n\n\n  \n    \n      \n      date_hospitalisation\n      case_id\n    \n  \n  \n    \n      0\n      2014-05-15\n      5fe599\n    \n    \n      1\n      2014-05-14\n      8689b7\n    \n    \n      2\n      2014-05-18\n      11f8ea\n    \n    \n      3\n      2014-05-20\n      b8812a\n    \n    \n      4\n      2014-05-22\n      893f25\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      5883\n      2015-04-22\n      76d8fe\n    \n    \n      5884\n      2015-04-24\n      dd6664\n    \n    \n      5885\n      2015-04-25\n      635ef3\n    \n    \n      5886\n      2015-04-26\n      4b859a\n    \n    \n      5887\n      2015-04-30\n      2068d6\n    \n  \n\n5888 rows × 2 columns\n\n\n\n\ndf_case_cnt = df_date_hosp.groupby('date_hospitalisation').count()\ndf_case_cnt = df_case_cnt.rename(columns={'case_id': 'new_cases'})\ndf_case_cnt\n\n\n\n\n\n  \n    \n      \n      new_cases\n    \n    \n      date_hospitalisation\n      \n    \n  \n  \n    \n      2014-04-17\n      1\n    \n    \n      2014-04-20\n      1\n    \n    \n      2014-04-25\n      1\n    \n    \n      2014-04-27\n      1\n    \n    \n      2014-04-29\n      1\n    \n    \n      ...\n      ...\n    \n    \n      2015-04-26\n      9\n    \n    \n      2015-04-27\n      6\n    \n    \n      2015-04-28\n      8\n    \n    \n      2015-04-29\n      8\n    \n    \n      2015-04-30\n      4\n    \n  \n\n363 rows × 1 columns\n\n\n\n\n\nwindow is the ROW and 6 prior ROWS\n\ndf_case_cnt['reg_7day'] = df_case_cnt['new_cases'].rolling(7).sum()\ndf_case_cnt.head(20)\n\n\n\n\n\n  \n    \n      \n      new_cases\n      reg_7day\n    \n    \n      date_hospitalisation\n      \n      \n    \n  \n  \n    \n      2014-04-17\n      1\n      NaN\n    \n    \n      2014-04-20\n      1\n      NaN\n    \n    \n      2014-04-25\n      1\n      NaN\n    \n    \n      2014-04-27\n      1\n      NaN\n    \n    \n      2014-04-29\n      1\n      NaN\n    \n    \n      2014-05-02\n      1\n      NaN\n    \n    \n      2014-05-04\n      1\n      7.0\n    \n    \n      2014-05-05\n      1\n      7.0\n    \n    \n      2014-05-06\n      2\n      8.0\n    \n    \n      2014-05-08\n      2\n      9.0\n    \n    \n      2014-05-09\n      1\n      9.0\n    \n    \n      2014-05-10\n      3\n      11.0\n    \n    \n      2014-05-11\n      1\n      11.0\n    \n    \n      2014-05-13\n      4\n      14.0\n    \n    \n      2014-05-14\n      3\n      16.0\n    \n    \n      2014-05-15\n      2\n      16.0\n    \n    \n      2014-05-16\n      2\n      16.0\n    \n    \n      2014-05-17\n      2\n      17.0\n    \n    \n      2014-05-18\n      3\n      17.0\n    \n    \n      2014-05-20\n      4\n      20.0\n    \n  \n\n\n\n\n\ndf_case_cnt.plot(y='new_cases')\ndf_case_cnt.plot(y='reg_7day')\n\n<AxesSubplot: xlabel='date_hospitalisation'>\n\n\n\n\n\n\n\n\n\n\nwindow is the Day and 6 prior days\n\ndf_case_cnt['indexed_7day'] = df_case_cnt['new_cases'].rolling('7D').sum()\ndf_case_cnt.head(20)\n\n\n\n\n\n  \n    \n      \n      new_cases\n      reg_7day\n      indexed_7day\n    \n    \n      date_hospitalisation\n      \n      \n      \n    \n  \n  \n    \n      2014-04-17\n      1\n      NaN\n      1.0\n    \n    \n      2014-04-20\n      1\n      NaN\n      2.0\n    \n    \n      2014-04-25\n      1\n      NaN\n      2.0\n    \n    \n      2014-04-27\n      1\n      NaN\n      2.0\n    \n    \n      2014-04-29\n      1\n      NaN\n      3.0\n    \n    \n      2014-05-02\n      1\n      NaN\n      3.0\n    \n    \n      2014-05-04\n      1\n      7.0\n      3.0\n    \n    \n      2014-05-05\n      1\n      7.0\n      4.0\n    \n    \n      2014-05-06\n      2\n      8.0\n      5.0\n    \n    \n      2014-05-08\n      2\n      9.0\n      7.0\n    \n    \n      2014-05-09\n      1\n      9.0\n      7.0\n    \n    \n      2014-05-10\n      3\n      11.0\n      10.0\n    \n    \n      2014-05-11\n      1\n      11.0\n      10.0\n    \n    \n      2014-05-13\n      4\n      14.0\n      11.0\n    \n    \n      2014-05-14\n      3\n      16.0\n      14.0\n    \n    \n      2014-05-15\n      2\n      16.0\n      14.0\n    \n    \n      2014-05-16\n      2\n      16.0\n      15.0\n    \n    \n      2014-05-17\n      2\n      17.0\n      14.0\n    \n    \n      2014-05-18\n      3\n      17.0\n      16.0\n    \n    \n      2014-05-20\n      4\n      20.0\n      16.0\n    \n  \n\n\n\n\n\n\nRolling by group\n\ndf_grouped_roll = pd.DataFrame(list(zip(linelist['hospital'], linelist['date_hospitalisation'], linelist['case_id'])), columns=['hospital','date_hospitalisation', 'case_id'])\ndf_grouped_roll\n\n\n\n\n\n  \n    \n      \n      hospital\n      date_hospitalisation\n      case_id\n    \n  \n  \n    \n      0\n      Other\n      2014-05-15\n      5fe599\n    \n    \n      1\n      Missing\n      2014-05-14\n      8689b7\n    \n    \n      2\n      St. Mark's Maternity Hospital (SMMH)\n      2014-05-18\n      11f8ea\n    \n    \n      3\n      Port Hospital\n      2014-05-20\n      b8812a\n    \n    \n      4\n      Military Hospital\n      2014-05-22\n      893f25\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      5883\n      Military Hospital\n      2015-04-22\n      76d8fe\n    \n    \n      5884\n      Port Hospital\n      2015-04-24\n      dd6664\n    \n    \n      5885\n      Missing\n      2015-04-25\n      635ef3\n    \n    \n      5886\n      Port Hospital\n      2015-04-26\n      4b859a\n    \n    \n      5887\n      Port Hospital\n      2015-04-30\n      2068d6\n    \n  \n\n5888 rows × 3 columns\n\n\n\n\ndf_grouped_roll['hospital'].unique()\n\narray(['Other', 'Missing', \"St. Mark's Maternity Hospital (SMMH)\",\n       'Port Hospital', 'Military Hospital', 'Central Hospital'],\n      dtype=object)\n\n\n\ndf_grouped_roll_CH = df_grouped_roll.query('hospital==\"Central Hospital\"')\ndf_grouped_roll_CH = df_grouped_roll_CH.groupby('date_hospitalisation').count()\ndf_grouped_roll_CH = df_grouped_roll_CH.rename(columns={'case_id': 'new_cases'})\ndf_grouped_roll_CH['indexed_7day'] = df_grouped_roll_CH['new_cases'].rolling('7D').mean()\ndf_grouped_roll_CH.drop('hospital', axis=1, inplace=True)\ndf_grouped_roll_CH\n\n\n\n\n\n  \n    \n      \n      new_cases\n      indexed_7day\n    \n    \n      date_hospitalisation\n      \n      \n    \n  \n  \n    \n      2014-05-06\n      1\n      1.000000\n    \n    \n      2014-05-10\n      1\n      1.000000\n    \n    \n      2014-05-13\n      1\n      1.000000\n    \n    \n      2014-05-28\n      2\n      2.000000\n    \n    \n      2014-06-06\n      1\n      1.000000\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      2015-04-21\n      1\n      1.333333\n    \n    \n      2015-04-22\n      1\n      1.250000\n    \n    \n      2015-04-23\n      1\n      1.200000\n    \n    \n      2015-04-26\n      2\n      1.400000\n    \n    \n      2015-04-28\n      3\n      1.750000\n    \n  \n\n216 rows × 2 columns\n\n\n\n\ndef groupby_hosp_7mean(df, hosp_name):\n    df = df.query(f'hospital==\"{hosp_name}\"')  ## important to have the double quote outside the input variable \n    df = df.groupby('date_hospitalisation').count()\n    df = df.rename(columns={'case_id': 'new_cases'})\n    df['indexed_7day'] = df['new_cases'].rolling('7D').mean()  # 7 refers to 7 index or '7D' refers to 7 days (only use 7D only if no dates are absent)\n    df.drop('hospital', axis=1, inplace=True)\n    df = df.reset_index(col_level=1)\n    return df\n\n\nfig, axs = plt.subplots(6)\nfig.set_size_inches(6,12, forward=True)\nfig.set_dpi(100)\nfor i, name in enumerate(df_grouped_roll['hospital'].unique()):\n    dfn = groupby_hosp_7mean(df_grouped_roll, name)\n    fig.supxlabel('Date of admission')\n    fig.supylabel('Cases incidence')\n    axs[i].bar(dfn['date_hospitalisation'], dfn['new_cases'])\n    axs[i].plot(dfn['date_hospitalisation'], dfn['indexed_7day'], 'tab:orange')\n    axs[i].set_title(name)\n    fig.tight_layout()"
  },
  {
    "objectID": "moving_averages.html#moving-average-for-onset-cases-by-date",
    "href": "moving_averages.html#moving-average-for-onset-cases-by-date",
    "title": "Moving Average",
    "section": "Moving Average for Onset Cases by Date",
    "text": "Moving Average for Onset Cases by Date\n\ndf_onset = linelist['date_onset'].value_counts().to_frame('daily cases').reset_index().sort_values('index')\ndf_onset\n\n\n\n\n\n  \n    \n      \n      index\n      daily cases\n    \n  \n  \n    \n      362\n      2014-04-07\n      1\n    \n    \n      361\n      2014-04-15\n      1\n    \n    \n      330\n      2014-04-21\n      2\n    \n    \n      359\n      2014-04-25\n      1\n    \n    \n      358\n      2014-04-26\n      1\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      224\n      2015-04-26\n      9\n    \n    \n      264\n      2015-04-27\n      7\n    \n    \n      242\n      2015-04-28\n      8\n    \n    \n      340\n      2015-04-29\n      2\n    \n    \n      343\n      2015-04-30\n      2\n    \n  \n\n367 rows × 2 columns\n\n\n\nCheck if any missing value\n\ndf_onset.isnull().sum()\n\nindex          0\ndaily cases    0\ndtype: int64\n\n\n\ndf_onset['SMA7'] = df_onset['daily cases'].rolling(7).mean() \ndf_onset.dropna(inplace=True)  # remove all NULL values at the beginning\ndf_onset\n\n\n\n\n\n  \n    \n      \n      index\n      daily cases\n      SMA7\n    \n  \n  \n    \n      344\n      2014-05-01\n      2\n      1.285714\n    \n    \n      349\n      2014-05-03\n      1\n      1.285714\n    \n    \n      366\n      2014-05-04\n      1\n      1.285714\n    \n    \n      363\n      2014-05-05\n      1\n      1.142857\n    \n    \n      317\n      2014-05-06\n      3\n      1.428571\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      224\n      2015-04-26\n      9\n      5.714286\n    \n    \n      264\n      2015-04-27\n      7\n      6.000000\n    \n    \n      242\n      2015-04-28\n      8\n      6.428571\n    \n    \n      340\n      2015-04-29\n      2\n      5.428571\n    \n    \n      343\n      2015-04-30\n      2\n      5.142857\n    \n  \n\n361 rows × 3 columns\n\n\n\n\ndf_onset.plot(x='index', y=['daily cases', 'SMA7'], figsize=(12,8))\n\n<AxesSubplot: xlabel='index'>"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pyepi",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "pyepi",
    "section": "Install",
    "text": "Install\npip install pyepi"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "pyepi",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "Data Management/characters_and_strings.html",
    "href": "Data Management/characters_and_strings.html",
    "title": "Characters and Strings",
    "section": "",
    "text": "import pandas as pd\n# import numpy as np\n# from scipy import stats\n# import matplotlib.pyplot as plt\nimport matplotlib.style as style\nfrom datetime import datetime"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#data",
    "href": "Data Management/characters_and_strings.html#data",
    "title": "Characters and Strings",
    "section": "Data",
    "text": "Data\nImport data from https://github.com/appliedepi/epiRhandbook_eng/blob/master/data/linelist_cleaned.xlsx and then save under “epiRhandbook_data” folder.\nNote: Installation of “openpyxl” is required.\n\nlinelist = pd.read_excel('../epiRhandbook_data/linelist_cleaned.xlsx')\nlinelist.head(3)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date_onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      age\n      age_unit\n      age_years\n      age_cat\n      age_cat5\n      hospital\n      lon\n      lat\n      infector\n      source\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      bmi\n      days_onset_hosp\n    \n  \n  \n    \n      0\n      5fe599\n      4\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      2.0\n      years\n      2.0\n      0-4\n      0-4\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      27\n      48\n      22\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      117.187500\n      2.0\n    \n    \n      1\n      8689b7\n      4\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Missing\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      25\n      59\n      22\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      71.818443\n      1.0\n    \n    \n      2\n      11f8ea\n      2\n      NaT\n      2014-05-16\n      2014-05-18\n      2014-05-30\n      Recover\n      m\n      56.0\n      years\n      56.0\n      50-69\n      55-59\n      St. Mark's Maternity Hospital (SMMH)\n      -13.212911\n      8.464817\n      NaN\n      NaN\n      91\n      238\n      21\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      16:48\n      16.065250\n      2.0"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#combine-strings",
    "href": "Data Management/characters_and_strings.html#combine-strings",
    "title": "Characters and Strings",
    "section": "Combine Strings",
    "text": "Combine Strings\n\nstr_c = str_1 + str_2 + str_3\nstr_c\n\n'String1String2String3'\n\n\n\ncombined_string = \" \".join([str_1, str_2, str_3])\ncombined_string\n\n'String1 String2 String3'\n\n\n\nfirst_names = (\"abdul\", \"fahruk\", \"janice\") \nlast_names  = (\"hussein\", \"akinleye\", \"okeke\")\nnames = list(zip(first_names, last_names))\nprint(names)\ncombined_names = [f\"{first} {last}\" for first, last in names]\n\";  \".join(combined_names)\n\n[('abdul', 'hussein'), ('fahruk', 'akinleye'), ('janice', 'okeke')]\n\n\n'abdul hussein;  fahruk akinleye;  janice okeke'\n\n\n\nprint(\"; \\n\".join(combined_names))\n\nabdul hussein; \nfahruk akinleye; \njanice okeke"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#dynamic-strings",
    "href": "Data Management/characters_and_strings.html#dynamic-strings",
    "title": "Characters and Strings",
    "section": "Dynamic Strings",
    "text": "Dynamic Strings\n\nprint(f\"Data include {len(linelist)} cases and are current to {format(datetime.now(), '%d %b %Y')}.\")\n\nData include 5888 cases and are current to 09 Jan 2023.\n\n\n\ncurrent_date  = format(datetime.now(), '%d %b %Y')\nlast_hospital = format((max(linelist['date_hospitalisation'])), '%d %B %Y')\n\n\nlast_hospital\n\n'30 April 2015'\n\n\n\nn_missing_onset = linelist['date_onset'].isnull().sum()\nn_missing_onset\n\n256\n\n\n\nprint(f\"Linelist as of {current_date}.\\nLast case hospitalized on {last_hospital}.\\n{n_missing_onset} cases are missing date of onset and not shown.\")\n\nLinelist as of 09 Jan 2023.\nLast case hospitalized on 30 April 2015.\n256 cases are missing date of onset and not shown."
  },
  {
    "objectID": "Data Management/characters_and_strings.html#pulling-from-a-dataframe",
    "href": "Data Management/characters_and_strings.html#pulling-from-a-dataframe",
    "title": "Characters and Strings",
    "section": "Pulling from a Dataframe",
    "text": "Pulling from a Dataframe\n\nzone        = (\"Zone 1\", \"Zone 2\", \"Zone 3\", \"Zone 4\", \"Zone 5\")\nnew_cases   = (3, 0, 7, 0, 15)\ntotal_cases = (40, 4, 25, 10, 103)\ndf = pd.DataFrame(list(zip(zone, new_cases, total_cases)), columns=['zone', 'new_cases', 'total_cases'])\ndf\n\n\n\n\n\n  \n    \n      \n      zone\n      new_cases\n      total_cases\n    \n  \n  \n    \n      0\n      Zone 1\n      3\n      40\n    \n    \n      1\n      Zone 2\n      0\n      4\n    \n    \n      2\n      Zone 3\n      7\n      25\n    \n    \n      3\n      Zone 4\n      0\n      10\n    \n    \n      4\n      Zone 5\n      15\n      103\n    \n  \n\n\n\n\n\nfor index, row in df.iterrows():\n    print(f\"{row['zone']}: {row['new_cases']} ({row['total_cases']} total cases)\")\n\nZone 1: 3 (40 total cases)\nZone 2: 0 (4 total cases)\nZone 3: 7 (25 total cases)\nZone 4: 0 (10 total cases)\nZone 5: 15 (103 total cases)"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#data-frame-to-one-line",
    "href": "Data Management/characters_and_strings.html#data-frame-to-one-line",
    "title": "Characters and Strings",
    "section": "Data frame to one line",
    "text": "Data frame to one line\n\nfor index, row in df.iterrows():\n    print(f\"{row['zone']}= {row['new_cases']}\")\n\nZone 1= 3\nZone 2= 0\nZone 3= 7\nZone 4= 0\nZone 5= 15\n\n\n\nresults = [f\"{row['zone']}= {row['new_cases']}\" for _, row in df.iterrows()]\nresults\n\n['Zone 1= 3', 'Zone 2= 0', 'Zone 3= 7', 'Zone 4= 0', 'Zone 5= 15']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#unite-columns",
    "href": "Data Management/characters_and_strings.html#unite-columns",
    "title": "Characters and Strings",
    "section": "Unite Columns",
    "text": "Unite Columns\n\ncase_ID = range(1,7)\nsymptoms = (\"jaundice, fever, chills\",  # patient 1\n         \"chills, aches, pains\",        # patient 2 \n         \"fever\",                       # patient 3\n         \"vomiting, diarrhoea\",         # patient 4\n         \"bleeding from gums, fever\",   # patient 5\n         \"rapid pulse, headache\")       # patient 6\noutcome = (\"Recover\", \"Death\", \"Death\", \"Recover\", \"Recover\", \"Recover\")\n\n\ndf = pd.DataFrame(list(zip(case_ID, symptoms, outcome)), columns=['case_ID', 'symtons', 'outcome'])\ndf\n\n\n\n\n\n  \n    \n      \n      case_ID\n      symtons\n      outcome\n    \n  \n  \n    \n      0\n      1\n      jaundice, fever, chills\n      Recover\n    \n    \n      1\n      2\n      chills, aches, pains\n      Death\n    \n    \n      2\n      3\n      fever\n      Death\n    \n    \n      3\n      4\n      vomiting, diarrhoea\n      Recover\n    \n    \n      4\n      5\n      bleeding from gums, fever\n      Recover\n    \n    \n      5\n      6\n      rapid pulse, headache\n      Recover\n    \n  \n\n\n\n\n\ndf_split = pd.concat([df[['case_ID']], df['symtons'].str.split(', ', expand=True), df['outcome']], axis=1)\ndf_split = df_split.rename({0: 'sym1', 1: 'sym2', 2:'sym3'}, axis='columns')\ndf_split\n\n\n\n\n\n  \n    \n      \n      case_ID\n      sym1\n      sym2\n      sym3\n      outcome\n    \n  \n  \n    \n      0\n      1\n      jaundice\n      fever\n      chills\n      Recover\n    \n    \n      1\n      2\n      chills\n      aches\n      pains\n      Death\n    \n    \n      2\n      3\n      fever\n      None\n      None\n      Death\n    \n    \n      3\n      4\n      vomiting\n      diarrhoea\n      None\n      Recover\n    \n    \n      4\n      5\n      bleeding from gums\n      fever\n      None\n      Recover\n    \n    \n      5\n      6\n      rapid pulse\n      headache\n      None\n      Recover"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#combine-columns-using-operator-not-working-if-there-are-empty-cells",
    "href": "Data Management/characters_and_strings.html#combine-columns-using-operator-not-working-if-there-are-empty-cells",
    "title": "Characters and Strings",
    "section": "combine columns using + Operator (Not working if there are empty cells)",
    "text": "combine columns using + Operator (Not working if there are empty cells)\n\ndf_split['all_symptons'] = df_split['sym1'] + \", \" + df_split['sym2'] + \", \" + df_split['sym3']\ndf_split\n\n\n\n\n\n  \n    \n      \n      case_ID\n      sym1\n      sym2\n      sym3\n      outcome\n      all_symptons\n    \n  \n  \n    \n      0\n      1\n      jaundice\n      fever\n      chills\n      Recover\n      jaundice, fever, chills\n    \n    \n      1\n      2\n      chills\n      aches\n      pains\n      Death\n      chills, aches, pains\n    \n    \n      2\n      3\n      fever\n      None\n      None\n      Death\n      NaN\n    \n    \n      3\n      4\n      vomiting\n      diarrhoea\n      None\n      Recover\n      NaN\n    \n    \n      4\n      5\n      bleeding from gums\n      fever\n      None\n      Recover\n      NaN\n    \n    \n      5\n      6\n      rapid pulse\n      headache\n      None\n      Recover\n      NaN\n    \n  \n\n\n\n\n\nUsing .apply() Method to Combine String Columns\nImportant: fill None with ” ”\n\ndf_all = df_split.copy(deep=True)\ndf_all_1 = df_all.fillna(\"\")\n\n\ndf_all_1['all_symptons'] = df_all_1[['sym1', 'sym2', 'sym3']].apply(lambda x: \" \".join(x), axis =1)\ndf_all_1\n\n\n\n\n\n  \n    \n      \n      case_ID\n      sym1\n      sym2\n      sym3\n      outcome\n      all_symptons\n    \n  \n  \n    \n      0\n      1\n      jaundice\n      fever\n      chills\n      Recover\n      jaundice fever chills\n    \n    \n      1\n      2\n      chills\n      aches\n      pains\n      Death\n      chills aches pains\n    \n    \n      2\n      3\n      fever\n      \n      \n      Death\n      fever\n    \n    \n      3\n      4\n      vomiting\n      diarrhoea\n      \n      Recover\n      vomiting diarrhoea\n    \n    \n      4\n      5\n      bleeding from gums\n      fever\n      \n      Recover\n      bleeding from gums fever\n    \n    \n      5\n      6\n      rapid pulse\n      headache\n      \n      Recover\n      rapid pulse headache\n    \n  \n\n\n\n\n\ndf_all_1[['case_ID', 'all_symptons', 'outcome']]\n\n\n\n\n\n  \n    \n      \n      case_ID\n      all_symptons\n      outcome\n    \n  \n  \n    \n      0\n      1\n      jaundice fever chills\n      Recover\n    \n    \n      1\n      2\n      chills aches pains\n      Death\n    \n    \n      2\n      3\n      fever\n      Death\n    \n    \n      3\n      4\n      vomiting diarrhoea\n      Recover\n    \n    \n      4\n      5\n      bleeding from gums fever\n      Recover\n    \n    \n      5\n      6\n      rapid pulse headache\n      Recover"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#split",
    "href": "Data Management/characters_and_strings.html#split",
    "title": "Characters and Strings",
    "section": "Split",
    "text": "Split\n\nstring = \"jaundice, fever, chills\"\nstring.split(',')\n\n['jaundice', ' fever', ' chills']\n\n\n\nstring.split(', ')\n\n['jaundice', 'fever', 'chills']\n\n\n\npt1_symptoms = string.split(', ')\npt1_symptoms[1]\n\n'fever'\n\n\n\nsymptoms =   [\"jaundice, fever, chills\",     # patient 1\n              \"chills, aches, pains\",        # patient 2 \n              \"fever\",                       # patient 3\n              \"vomiting, diarrhoea\",         # patient 4\n              \"bleeding from gums, fever\",   # patient 5\n              \"rapid pulse, headache\"]       # patient 6\n\n\nsymptoms[0]   # Python indexing starts from zero\n\n'jaundice, fever, chills'\n\n\n\nsymptoms[1]\n\n'chills, aches, pains'\n\n\n\nsymptoms[2]\n\n'fever'\n\n\n\nsymptoms[3]\n\n'vomiting, diarrhoea'\n\n\n\nsymptoms[4]\n\n'bleeding from gums, fever'\n\n\n\nsymptoms[5]\n\n'rapid pulse, headache'\n\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      case_ID\n      symtons\n      outcome\n    \n  \n  \n    \n      0\n      1\n      jaundice, fever, chills\n      Recover\n    \n    \n      1\n      2\n      chills, aches, pains\n      Death\n    \n    \n      2\n      3\n      fever\n      Death\n    \n    \n      3\n      4\n      vomiting, diarrhoea\n      Recover\n    \n    \n      4\n      5\n      bleeding from gums, fever\n      Recover\n    \n    \n      5\n      6\n      rapid pulse, headache\n      Recover\n    \n  \n\n\n\n\nNote: None for empty cell\n\nsymt_all = df['symtons'].str.split(', ', expand=True)\n\n\nsymt_all = symt_all.rename({0: 'sym1', 1: 'sym2', 2: 'sym3'}, axis='columns')\nsymt_all\n\n\n\n\n\n  \n    \n      \n      sym1\n      sym2\n      sym3\n    \n  \n  \n    \n      0\n      jaundice\n      fever\n      chills\n    \n    \n      1\n      chills\n      aches\n      pains\n    \n    \n      2\n      fever\n      None\n      None\n    \n    \n      3\n      vomiting\n      diarrhoea\n      None\n    \n    \n      4\n      bleeding from gums\n      fever\n      None\n    \n    \n      5\n      rapid pulse\n      headache\n      None\n    \n  \n\n\n\n\n\nsymt_all = symt_all.fillna(\"\")\n\n\nsymt_all['sym_2'] = symt_all[['sym2', 'sym3']].apply(lambda x: \" \".join(x), axis =1)\nsymt_all\n\n\n\n\n\n  \n    \n      \n      sym1\n      sym2\n      sym3\n      sym_2\n    \n  \n  \n    \n      0\n      jaundice\n      fever\n      chills\n      fever chills\n    \n    \n      1\n      chills\n      aches\n      pains\n      aches pains\n    \n    \n      2\n      fever\n      \n      \n      \n    \n    \n      3\n      vomiting\n      diarrhoea\n      \n      diarrhoea\n    \n    \n      4\n      bleeding from gums\n      fever\n      \n      fever\n    \n    \n      5\n      rapid pulse\n      headache\n      \n      headache\n    \n  \n\n\n\n\n\ndf_split1 = pd.concat([df[['case_ID']], symt_all['sym1'], symt_all['sym_2'], df['outcome']], axis=1)\ndf_split1\n\n\n\n\n\n  \n    \n      \n      case_ID\n      sym1\n      sym_2\n      outcome\n    \n  \n  \n    \n      0\n      1\n      jaundice\n      fever chills\n      Recover\n    \n    \n      1\n      2\n      chills\n      aches pains\n      Death\n    \n    \n      2\n      3\n      fever\n      \n      Death\n    \n    \n      3\n      4\n      vomiting\n      diarrhoea\n      Recover\n    \n    \n      4\n      5\n      bleeding from gums\n      fever\n      Recover\n    \n    \n      5\n      6\n      rapid pulse\n      headache\n      Recover\n    \n  \n\n\n\n\nWarnings: If limited the expanded columns, your data may be truncated.\n\nsymt2 = symt_all[symt_all.columns[0:2]]\nsymt2\n\n\n\n\n\n  \n    \n      \n      sym1\n      sym2\n    \n  \n  \n    \n      0\n      jaundice\n      fever\n    \n    \n      1\n      chills\n      aches\n    \n    \n      2\n      fever\n      \n    \n    \n      3\n      vomiting\n      diarrhoea\n    \n    \n      4\n      bleeding from gums\n      fever\n    \n    \n      5\n      rapid pulse\n      headache\n    \n  \n\n\n\n\n\ndf_split2 = pd.concat([df[['case_ID']], symt2, df['outcome']], axis=1)\ndf_split2\n\n\n\n\n\n  \n    \n      \n      case_ID\n      sym1\n      sym2\n      outcome\n    \n  \n  \n    \n      0\n      1\n      jaundice\n      fever\n      Recover\n    \n    \n      1\n      2\n      chills\n      aches\n      Death\n    \n    \n      2\n      3\n      fever\n      \n      Death\n    \n    \n      3\n      4\n      vomiting\n      diarrhoea\n      Recover\n    \n    \n      4\n      5\n      bleeding from gums\n      fever\n      Recover\n    \n    \n      5\n      6\n      rapid pulse\n      headache\n      Recover"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#arrange-alphabetically",
    "href": "Data Management/characters_and_strings.html#arrange-alphabetically",
    "title": "Characters and Strings",
    "section": "Arrange Alphabetically",
    "text": "Arrange Alphabetically\n\nhealth_zones = [\"Alba\", \"Takota\", \"Delta\"]\nhealth_zones.sort()\nhealth_zones\n\n['Alba', 'Delta', 'Takota']\n\n\n\nn_beds = 10\nn_masks = 20\n\n\nprint(f\"Regional hospital needs\", n_beds, \"beds and\", n_masks, \"masks.\")\n\nRegional hospital needs 10 beds and 20 masks.\n\n\n\nprint(f\"Regional hospital needs {n_beds} beds and {n_masks} masks.\")\n\nRegional hospital needs 10 beds and 20 masks."
  },
  {
    "objectID": "Data Management/characters_and_strings.html#change-case",
    "href": "Data Management/characters_and_strings.html#change-case",
    "title": "Characters and Strings",
    "section": "Change Case",
    "text": "Change Case\n\nstr1 = \"California\"\nstr1.upper()\n\n'CALIFORNIA'\n\n\n\nstr1.lower()\n\n'california'\n\n\n\nstr1.title()\n\n'California'"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#title-case",
    "href": "Data Management/characters_and_strings.html#title-case",
    "title": "Characters and Strings",
    "section": "Title Case",
    "text": "Title Case\n\nstr2 = \"go to the US state of california \"\nstr2.title()\n\n'Go To The Us State Of California '\n\n\n\nstr3 = \"the patient must be transported\"\nstr3.capitalize()\n\n'The patient must be transported'"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#pad-length",
    "href": "Data Management/characters_and_strings.html#pad-length",
    "title": "Characters and Strings",
    "section": "Pad Length",
    "text": "Pad Length\n\nICD_codes = [\"R10.13\", \"R10.819\", \"R17\"]\n[i.ljust(7) for i in ICD_codes]\n\n['R10.13 ', 'R10.819', 'R17    ']\n\n\n\n[i.ljust(7, '.') for i in ICD_codes]\n\n['R10.13.', 'R10.819', 'R17....']\n\n\n\nstr(4).rjust(2, '0')\n\n'04'\n\n\n\n[str(i).rjust(2, '0') for i in range(0, 4)]\n\n['00', '01', '02', '03']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#truncate",
    "href": "Data Management/characters_and_strings.html#truncate",
    "title": "Characters and Strings",
    "section": "Truncate",
    "text": "Truncate\n\noriginal = \"Symptom onset on 4/3/2020 with vomiting\"\n\n\noriginal[:4] + \"...\" + original[-3:]\n\n'Symp...ing'\n\n\n\nimport textwrap\ntextwrap.shorten(\"Symptom onset on 4/3/2020 with vomiting\", width=10, placeholder=\"...\")+ original[-3:]\n\n'Symptom...ing'"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#standarize-length",
    "href": "Data Management/characters_and_strings.html#standarize-length",
    "title": "Characters and Strings",
    "section": "Standarize Length",
    "text": "Standarize Length\nSet as length of 6\n\n[i.ljust(6, \".\")[:6] for i in ICD_codes]\n\n['R10.13', 'R10.81', 'R17...']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#remove-leadingtrailing-whitespace",
    "href": "Data Management/characters_and_strings.html#remove-leadingtrailing-whitespace",
    "title": "Characters and Strings",
    "section": "Remove leading/trailing whitespace",
    "text": "Remove leading/trailing whitespace\n\nIDs =   [\"provA_1852  \", # two excess spaces\n         \"provA_2345\",   # zero excess spaces\n         \"provA_9460 \"]  # one excess space\n\n\n[i.strip() for i in IDs]\n\n['provA_1852', 'provA_2345', 'provA_9460']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#remove-repeated-whitespace-within",
    "href": "Data Management/characters_and_strings.html#remove-repeated-whitespace-within",
    "title": "Characters and Strings",
    "section": "Remove Repeated Whitespace within",
    "text": "Remove Repeated Whitespace within\n\nstr_squish = \"  Pt requires   IV saline\\n\"\nstr_squish\n\n'  Pt requires   IV saline\\n'\n\n\n\n' '.join(str_squish.split())\n\n'Pt requires IV saline'"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#wrap-into-paragraphs",
    "href": "Data Management/characters_and_strings.html#wrap-into-paragraphs",
    "title": "Characters and Strings",
    "section": "Wrap into Paragraphs",
    "text": "Wrap into Paragraphs\n\npt_course = \"Symptom onset 1/4/2020 vomiting chills fever. Pt saw traditional healer in home village on 2/4/2020. On 5/4/2020 pt symptoms worsened and was admitted to Lumta clinic. Sample was taken and pt was transported to regional hospital on 6/4/2020. Pt died at regional hospital on 7/4/2020.\"\npt_course\n\n'Symptom onset 1/4/2020 vomiting chills fever. Pt saw traditional healer in home village on 2/4/2020. On 5/4/2020 pt symptoms worsened and was admitted to Lumta clinic. Sample was taken and pt was transported to regional hospital on 6/4/2020. Pt died at regional hospital on 7/4/2020.'\n\n\n\ntextwrap.wrap(pt_course, 40)\n\n['Symptom onset 1/4/2020 vomiting chills',\n 'fever. Pt saw traditional healer in home',\n 'village on 2/4/2020. On 5/4/2020 pt',\n 'symptoms worsened and was admitted to',\n 'Lumta clinic. Sample was taken and pt',\n 'was transported to regional hospital on',\n '6/4/2020. Pt died at regional hospital',\n 'on 7/4/2020.']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#extract-by-word-position",
    "href": "Data Management/characters_and_strings.html#extract-by-word-position",
    "title": "Characters and Strings",
    "section": "Extract by Word Position",
    "text": "Extract by Word Position\n\nchief_complaints =   [\"I just got out of the hospital 2 days ago, but still can barely breathe.\",\n                      \"My stomach hurts\",\n                      \"Severe ear pain\"]\n\n\n[\" \".join(x.split()[:3]) for x in chief_complaints]  # extract 1st to 3rd words of each string\n\n['I just got', 'My stomach hurts', 'Severe ear pain']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#replace-by-character-position",
    "href": "Data Management/characters_and_strings.html#replace-by-character-position",
    "title": "Characters and Strings",
    "section": "Replace by Character Position",
    "text": "Replace by Character Position\n\nword = \"pneumonia\"\n\n\nword[2:4]\n\n'eu'\n\n\n\nnew_ele = \"XX\"\nword[:2] + new_ele + word[4:]  # convert the third and fourth characters to X\n\n'pnXXmonia'\n\n\n\nwords = \"pneumonia\", \"tubercolosis\", \"HIV\"\n[word[:2] + new_ele + word[4:] for word in words]\n\n['pnXXmonia', 'tuXXrcolosis', 'HIXX']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#detect-a-pattern",
    "href": "Data Management/characters_and_strings.html#detect-a-pattern",
    "title": "Characters and Strings",
    "section": "Detect a pattern",
    "text": "Detect a pattern\n\nstring = \"primary school teacher\"\npattern = 'teach'\n\nNote: If return a numeric number, that is the index of the given string. If return -1, no pattern found.\n\nstring.find(pattern)\n\n15\n\n\nNote: Try to apply the pattern to all of the string, returning a Match object, or None if no match was found.\n\nimport re\nre.fullmatch(pattern, string)\n\n\nif not re.fullmatch(pattern, string):\n    print(\"FALSE\")\n\nFALSE\n\n\n\noccupations = [\"field laborer\",\n                 \"university professor\",\n                 \"primary school teacher & tutor\",\n                 \"tutor\",\n                 \"nurse at regional hospital\",\n                 \"lineworker at Amberdeen Fish Factory\",\n                 \"physican\",\n                 \"cardiologist\",\n                 \"office worker\",\n                 \"food service\"]\n\n\n[pattern in o for o in occupations]\n\n[False, False, True, False, False, False, False, False, False, False]\n\n\nUsing in a for loop:\n\nn = 0\nfor o in occupations:\n    if pattern in o:\n        n+=1\nn\n\n1\n\n\nOr, using list comprehension\n\nsum([1 if pattern in o else 0 for o in occupations])\n\n1"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#detect-multiple-terms-separated-by-or-bars",
    "href": "Data Management/characters_and_strings.html#detect-multiple-terms-separated-by-or-bars",
    "title": "Characters and Strings",
    "section": "Detect Multiple Terms, separated by OR bars |",
    "text": "Detect Multiple Terms, separated by OR bars |\n\npattern = r\"\\b(teach|professor|tutor)\\b\"  # Use raw string and word boundary anchors\n\n\nimport re\n\ndef count_occurrences(strings, pattern):\n    count = 0\n    for string in strings:\n        count += sum(1 for _ in re.finditer(pattern, string, re.IGNORECASE))\n    return count\n\nresult = count_occurrences(strings=occupations, pattern=pattern)\nprint(result)  # Expected output: 3\n\n3\n\n\n\noccupation_med_frontline =    [\"medical\", \"medicine\", \"hcw\", \"healthcare\", \"home care\", \"home health\",\n                                \"surgeon\", \"doctor\", \"doc\", \"physician\", \"surgery\", \"peds\", \"pediatrician\",\n                               \"intensivist\", \"cardiologist\", \"coroner\", \"nurse\", \"nursing\", \"rn\", \"lpn\",\n                               \"cna\", \"pa\", \"physician assistant\", \"mental health\",\n                               \"emergency department technician\", \"resp therapist\", \"respiratory\",\n                                \"phlebotomist\", \"pharmacy\", \"pharmacist\", \"hospital\", \"snf\", \"rehabilitation\",\n                               \"rehab\", \"activity\", \"elderly\", \"subacute\", \"sub acute\",\n                                \"clinic\", \"post acute\", \"therapist\", \"extended care\",\n                                \"dental\", \"dential\", \"dentist\"]\n\n\nmed_pattern = str(\"|\".join(occupation_med_frontline))\nmed_pattern\n\n'medical|medicine|hcw|healthcare|home care|home health|surgeon|doctor|doc|physician|surgery|peds|pediatrician|intensivist|cardiologist|coroner|nurse|nursing|rn|lpn|cna|pa|physician assistant|mental health|emergency department technician|resp therapist|respiratory|phlebotomist|pharmacy|pharmacist|hospital|snf|rehabilitation|rehab|activity|elderly|subacute|sub acute|clinic|post acute|therapist|extended care|dental|dential|dentist'\n\n\n\nmed_pattern = r\"\\b(medical|medicine|hcw|healthcare|home care|home health|surgeon|doctor|doc|physician|surgery|peds|pediatrician|intensivist|cardiologist|coroner|nurse|nursing|rn|lpn|cna|pa|physician assistant|mental health|emergency department technician|resp therapist|respiratory|phlebotomist|pharmacy|pharmacist|hospital|snf|rehabilitation|rehab|activity|elderly|subacute|sub acute|clinic|post acute|therapist|extended care|dental|dential|dentist)\\b\"\n\n\nresult = count_occurrences(strings=occupations, pattern=med_pattern)\nprint(result)  ##expected answer is 2 #TODO debug\n\n3\n\n\n\nimport re\n\ndef count_occurrences(strings, pattern):\n    count = 0\n    for string in strings:\n        count += sum(1 for _ in re.finditer(pattern, string, re.IGNORECASE))\n    return count\n\noccupations = [\"field laborer\",\n                 \"university professor\",\n                 \"primary school teacher & tutor\",\n                 \"tutor\",\n                 \"nurse at regional hospital\",\n                 \"lineworker at Amberdeen Fish Factory\",\n                 \"physican\",\n                 \"cardiologist\",\n                 \"office worker\",\n                 \"food service\"]\nmed_pattern = r\"\\b(medical|medicine|hcw|healthcare|home care|home health|surgeon|doctor|doc|physician|surgery|peds|pediatrician|intensivist|cardiologist|coroner|nurse|nursing|rn|lpn|cna|pa|physician assistant|mental health|emergency department technician|resp therapist|respiratory|phlebotomist|pharmacy|pharmacist|hospital|snf|rehabilitation|rehab|activity|elderly|subacute|sub acute|clinic|post acute|therapist|extended care|dental|dential|dentist)\\b\"\n\nresult = count_occurrences(strings=occupations, pattern=med_pattern)\nprint(result)  # Expected output: 2  #TODO debug\n\n3"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#convert-commas-to-period-.",
    "href": "Data Management/characters_and_strings.html#convert-commas-to-period-.",
    "title": "Characters and Strings",
    "section": "Convert Commas , to Period .",
    "text": "Convert Commas , to Period .\n\nlengths = [\"2.454,56\", \"1,2\", \"6.096,5\"]\n\n# Replace periods and commas with no spaces and then convert the strings to floats\ny = [float(l.replace(\".\", \"\").replace(\",\", \".\")) for l in lengths]\ny\n\n[2454.56, 1.2, 6096.5]"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#replace-all",
    "href": "Data Management/characters_and_strings.html#replace-all",
    "title": "Characters and Strings",
    "section": "Replace All",
    "text": "Replace All\n\noutcome =  [\"Karl: dead\",\n            \"Samantha: dead\",\n            \"Marco: not dead\"]\n\n\n[o.replace('dead', 'deceased') for o in outcome]\n\n['Karl: deceased', 'Samantha: deceased', 'Marco: not deceased']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#detect-with-logic",
    "href": "Data Management/characters_and_strings.html#detect-with-logic",
    "title": "Characters and Strings",
    "section": "Detect with Logic",
    "text": "Detect with Logic\nsee above Detect Multiple Terms, separated by OR bars |"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#locate-pattern-position",
    "href": "Data Management/characters_and_strings.html#locate-pattern-position",
    "title": "Characters and Strings",
    "section": "Locate Pattern Position",
    "text": "Locate Pattern Position\n\nstring = 'I wish'\npattern = 'sh'\nstring.find(pattern)  # return start position (Note: Python indexing starts from zero)\n\n4\n\n\nTo find end position\n\nstring.find(pattern) + len(pattern) - 1\n\n5\n\n\n\nphrases = [\"I wish\", \"I hope\", \"he hopes\", \"He hopes\"]\npattern = 'h'\n\n\nstart = []\nend = []\nfor p in phrases:\n    start.append(p.find(pattern))\n    end.append((p.find(pattern) + len(pattern) -1))\nprint(start)\nprint(end)\n\n[5, 2, 0, 3]\n[5, 2, 0, 3]\n\n\n\nlist(zip(start, end))\n\n[(5, 5), (2, 2), (0, 0), (3, 3)]"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#extract-a-match",
    "href": "Data Management/characters_and_strings.html#extract-a-match",
    "title": "Characters and Strings",
    "section": "Extract a Match",
    "text": "Extract a Match\n\noccupations\n\n['field laborer',\n 'university professor',\n 'primary school teacher & tutor',\n 'tutor',\n 'nurse at regional hospital',\n 'lineworker at Amberdeen Fish Factory',\n 'physican',\n 'cardiologist',\n 'office worker',\n 'food service']\n\n\n\nfor i, o in enumerate(occupations):\n    if 'teach' in o or 'prof' in o or 'tutor' in o:\n        print(i, o)\n    else:\n        print(i, 0)\n\n0 0\n1 university professor\n2 primary school teacher & tutor\n3 tutor\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n\n\n\n[o if 'teach' in o or 'prof' in o or 'tutor' in o else 'NA' for o in occupations]\n\n['NA',\n 'university professor',\n 'primary school teacher & tutor',\n 'tutor',\n 'NA',\n 'NA',\n 'NA',\n 'NA',\n 'NA',\n 'NA']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#subset-and-count",
    "href": "Data Management/characters_and_strings.html#subset-and-count",
    "title": "Characters and Strings",
    "section": "Subset and Count",
    "text": "Subset and Count\n\n[o for o in occupations if 'teach' in o or 'prof' in o or 'tutor' in o]  # ignore the else 'NA' to get a shorter answer\n\n['university professor', 'primary school teacher & tutor', 'tutor']\n\n\n\n[(i, o) for i, o in enumerate(occupations) if 'teach' in o or 'prof' in o or 'tutor' in o]\n\n[(1, 'university professor'),\n (2, 'primary school teacher & tutor'),\n (3, 'tutor')]\n\n\n\nfor o in occupations:\n    n = 0\n    if 'teach' in o.lower():\n        n+=1\n    if 'prof' in o.lower():\n        n+=1\n    if 'tutor' in o.lower():\n        n+=1\n    print(n)\n\n0\n1\n2\n1\n0\n0\n0\n0\n0\n0"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#quantifiers",
    "href": "Data Management/characters_and_strings.html#quantifiers",
    "title": "Characters and Strings",
    "section": "Quantifiers {}",
    "text": "Quantifiers {}\n\nresult = re.findall(r'A{2}', test)\nresult\n\n['AA', 'AA', 'AA', 'AA']\n\n\nAlternatively, use re.match to find the first match but preparation of text required.\n\ntest = test.replace('-', ' ')\ntest = test.split()\ntest\n\n['A', 'AA', 'AAA', 'AAAA']\n\n\n\nfor t in test:\n    result = re.match(r'A{2}', t)\n    print(result)\n\nNone\n<re.Match object; span=(0, 2), match='AA'>\n<re.Match object; span=(0, 2), match='AA'>\n<re.Match object; span=(0, 2), match='AA'>\n\n\nWhen a quantifier of {2,4} is used, groups of consecutive A’s that are two to four in length are returned.\n\ntest = \"A-AA-AAA-AAAA\"\nresult = re.findall(r'A{2,4}', test)\nresult\n\n['AA', 'AAA', 'AAAA']\n\n\nWith the quantifier +, groups of one or more are returned:\n\nresult = re.findall(r'A+', test)\nresult\n\n['A', 'AA', 'AAA', 'AAAA']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#relative-position",
    "href": "Data Management/characters_and_strings.html#relative-position",
    "title": "Characters and Strings",
    "section": "Relative Position",
    "text": "Relative Position\n\nresult = re.findall(r'', test)\nresult\n\n['', '', '', '', '', '', '', '', '', '', '', '', '', '']"
  },
  {
    "objectID": "Data Management/characters_and_strings.html#regex-examples",
    "href": "Data Management/characters_and_strings.html#regex-examples",
    "title": "Characters and Strings",
    "section": "RegEx Examples",
    "text": "RegEx Examples\n\npt_note = \"Patient arrived at Broward Hospital emergency ward at 18:00 on 6/12/2005. Patient presented with radiating abdominal pain from LR quadrant. Patient skin was pale, cool, and clammy. Patient temperature was 99.8 degrees farinheit. Patient pulse rate was 100 bpm and thready. Respiratory rate was 29 per minute.\"\npt_note\n\n'Patient arrived at Broward Hospital emergency ward at 18:00 on 6/12/2005. Patient presented with radiating abdominal pain from LR quadrant. Patient skin was pale, cool, and clammy. Patient temperature was 99.8 degrees farinheit. Patient pulse rate was 100 bpm and thready. Respiratory rate was 29 per minute.'\n\n\n\npattern = r\"[A-Za-z]+\"\nresult = re.findall(pattern, pt_note)\nresult\n\n['Patient',\n 'arrived',\n 'at',\n 'Broward',\n 'Hospital',\n 'emergency',\n 'ward',\n 'at',\n 'on',\n 'Patient',\n 'presented',\n 'with',\n 'radiating',\n 'abdominal',\n 'pain',\n 'from',\n 'LR',\n 'quadrant',\n 'Patient',\n 'skin',\n 'was',\n 'pale',\n 'cool',\n 'and',\n 'clammy',\n 'Patient',\n 'temperature',\n 'was',\n 'degrees',\n 'farinheit',\n 'Patient',\n 'pulse',\n 'rate',\n 'was',\n 'bpm',\n 'and',\n 'thready',\n 'Respiratory',\n 'rate',\n 'was',\n 'per',\n 'minute']\n\n\n\npattern = r\"[0-9]{1,2}\"\nresult = re.findall(pattern, pt_note)\nresult\n\n['18', '00', '6', '12', '20', '05', '99', '8', '10', '0', '29']\n\n\nTips: Go go https://regexr.com/, you can put your text and pattern there to visualise the output. Note: Also, you can apply different flags to achieve the results you wanted."
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html",
    "href": "Data Management/cleaning_data_and_core_functions.html",
    "title": "Cleaning Data and Core Functions",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#set-up",
    "href": "Data Management/cleaning_data_and_core_functions.html#set-up",
    "title": "Cleaning Data and Core Functions",
    "section": "Set up",
    "text": "Set up\nTo use colourbind colour schemes (optional). To get the color, see https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/mpl-data/stylelib/tableau-colorblind10.mplstyle\n\nstyle.use('tableau-colorblind10')"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#name-of-columns",
    "href": "Data Management/cleaning_data_and_core_functions.html#name-of-columns",
    "title": "Cleaning Data and Core Functions",
    "section": "Name of columns",
    "text": "Name of columns\n\nlinelist_raw.columns\n\nIndex(['case_id', 'generation', 'infection date', 'date onset', 'hosp date', 'date_of_outcome', 'outcome', 'gender', 'hospital', 'lon', 'lat', 'infector', 'source', 'age', 'age_unit', 'row_num', 'wt_kg', 'ht_cm', 'ct_blood', 'fever', 'chills', 'cough', 'aches', 'vomit', 'temp', 'time_admission', 'merged_header', 'Unnamed: 27'], dtype='object')"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#check-data-type",
    "href": "Data Management/cleaning_data_and_core_functions.html#check-data-type",
    "title": "Cleaning Data and Core Functions",
    "section": "Check Data Type",
    "text": "Check Data Type\n\nlinelist_raw.dtypes\n\ncase_id                    object\ngeneration                float64\ninfection date     datetime64[ns]\ndate onset                 object\nhosp date          datetime64[ns]\ndate_of_outcome    datetime64[ns]\noutcome                    object\ngender                     object\nhospital                   object\nlon                       float64\nlat                       float64\ninfector                   object\nsource                     object\nage                       float64\nage_unit                   object\nrow_num                     int64\nwt_kg                     float64\nht_cm                     float64\nct_blood                  float64\nfever                      object\nchills                     object\ncough                      object\naches                      object\nvomit                      object\ntemp                      float64\ntime_admission             object\nmerged_header              object\nUnnamed: 27                object\ndtype: object"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#check-empty",
    "href": "Data Management/cleaning_data_and_core_functions.html#check-empty",
    "title": "Cleaning Data and Core Functions",
    "section": "Check Empty",
    "text": "Check Empty\n\nlinelist_raw.empty\n\nFalse"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#number-of-rows-and-columns-in-the-dataframe",
    "href": "Data Management/cleaning_data_and_core_functions.html#number-of-rows-and-columns-in-the-dataframe",
    "title": "Cleaning Data and Core Functions",
    "section": "Number of rows and columns in the dataframe",
    "text": "Number of rows and columns in the dataframe\n\nlinelist_raw.shape\n\n(6611, 28)"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#check-dimension-rows-x-columns",
    "href": "Data Management/cleaning_data_and_core_functions.html#check-dimension-rows-x-columns",
    "title": "Cleaning Data and Core Functions",
    "section": "Check Dimension (Rows x Columns)",
    "text": "Check Dimension (Rows x Columns)\n\nlinelist_raw.size\n\n185108\n\n\n\n6611 * 28\n\n185108"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#check-missing-value",
    "href": "Data Management/cleaning_data_and_core_functions.html#check-missing-value",
    "title": "Cleaning Data and Core Functions",
    "section": "Check Missing Value",
    "text": "Check Missing Value\n\ncheck every cell\n\nlinelist_raw.isnull()\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      infection date\n      date onset\n      hosp date\n      date_of_outcome\n      outcome\n      gender\n      hospital\n      lon\n      lat\n      infector\n      source\n      age\n      age_unit\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      merged_header\n      Unnamed: 27\n    \n  \n  \n    \n      0\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      False\n      False\n    \n    \n      1\n      False\n      False\n      True\n      False\n      False\n      False\n      False\n      False\n      True\n      False\n      False\n      True\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n      True\n      True\n      True\n      False\n      False\n      False\n      False\n    \n    \n      2\n      False\n      False\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n      True\n      True\n      True\n      False\n      False\n      False\n      False\n    \n    \n      3\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      4\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      6606\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      6607\n      False\n      False\n      True\n      False\n      False\n      False\n      False\n      False\n      True\n      False\n      False\n      True\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      6608\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      6609\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      6610\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n  \n\n6611 rows × 28 columns\n\n\n\n\n\ncheck column-wise\n\nlinelist_raw.isnull().sum()\n\ncase_id               7\ngeneration            7\ninfection date     2322\ndate onset          293\nhosp date             7\ndate_of_outcome    1068\noutcome            1500\ngender              324\nhospital           1512\nlon                   7\nlat                   7\ninfector           2323\nsource             2323\nage                 107\nage_unit              7\nrow_num               0\nwt_kg                 7\nht_cm                 7\nct_blood              7\nfever               258\nchills              258\ncough               258\naches               258\nvomit               258\ntemp                158\ntime_admission      844\nmerged_header         0\nUnnamed: 27           0\ndtype: int64\n\n\n\n\nCheck total missing value\n\nlinelist_raw.isnull().sum().sum()\n\n14127"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#get-information",
    "href": "Data Management/cleaning_data_and_core_functions.html#get-information",
    "title": "Cleaning Data and Core Functions",
    "section": "Get Information",
    "text": "Get Information\n\nlinelist_raw.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6611 entries, 0 to 6610\nData columns (total 28 columns):\n #   Column           Non-Null Count  Dtype         \n---  ------           --------------  -----         \n 0   case_id          6604 non-null   object        \n 1   generation       6604 non-null   float64       \n 2   infection date   4289 non-null   datetime64[ns]\n 3   date onset       6318 non-null   object        \n 4   hosp date        6604 non-null   datetime64[ns]\n 5   date_of_outcome  5543 non-null   datetime64[ns]\n 6   outcome          5111 non-null   object        \n 7   gender           6287 non-null   object        \n 8   hospital         5099 non-null   object        \n 9   lon              6604 non-null   float64       \n 10  lat              6604 non-null   float64       \n 11  infector         4288 non-null   object        \n 12  source           4288 non-null   object        \n 13  age              6504 non-null   float64       \n 14  age_unit         6604 non-null   object        \n 15  row_num          6611 non-null   int64         \n 16  wt_kg            6604 non-null   float64       \n 17  ht_cm            6604 non-null   float64       \n 18  ct_blood         6604 non-null   float64       \n 19  fever            6353 non-null   object        \n 20  chills           6353 non-null   object        \n 21  cough            6353 non-null   object        \n 22  aches            6353 non-null   object        \n 23  vomit            6353 non-null   object        \n 24  temp             6453 non-null   float64       \n 25  time_admission   5767 non-null   object        \n 26  merged_header    6611 non-null   object        \n 27  Unnamed: 27      6611 non-null   object        \ndtypes: datetime64[ns](3), float64(8), int64(1), object(16)\nmemory usage: 1.4+ MB"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#show-top-rows",
    "href": "Data Management/cleaning_data_and_core_functions.html#show-top-rows",
    "title": "Cleaning Data and Core Functions",
    "section": "Show Top Rows",
    "text": "Show Top Rows\n\nNo_of_line_display = 2\nlinelist_raw.head(No_of_line_display)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      infection date\n      date onset\n      hosp date\n      date_of_outcome\n      outcome\n      gender\n      hospital\n      lon\n      lat\n      infector\n      source\n      age\n      age_unit\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      merged_header\n      Unnamed: 27\n    \n  \n  \n    \n      0\n      5fe599\n      4.0\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      2.0\n      years\n      1\n      27.0\n      48.0\n      22.0\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      a\n      b\n    \n    \n      1\n      8689b7\n      4.0\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      NaN\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      3.0\n      years\n      2\n      25.0\n      59.0\n      22.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      a\n      b"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#show-bottom-rows",
    "href": "Data Management/cleaning_data_and_core_functions.html#show-bottom-rows",
    "title": "Cleaning Data and Core Functions",
    "section": "Show Bottom Rows",
    "text": "Show Bottom Rows\n\nlinelist_raw.tail(No_of_line_display)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      infection date\n      date onset\n      hosp date\n      date_of_outcome\n      outcome\n      gender\n      hospital\n      lon\n      lat\n      infector\n      source\n      age\n      age_unit\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      merged_header\n      Unnamed: 27\n    \n  \n  \n    \n      6609\n      \n      13.0\n      2014-09-24\n      2014-10-03\n      2014-10-05\n      2014-11-04\n      Recover\n      f\n      Central Hospital\n      -13.221415\n      8.484094\n      8b100a\n      other\n      2.0\n      years\n      2237\n      24.0\n      68.0\n      22.0\n      yes\n      yes\n      yes\n      no\n      yes\n      38.1\n      07:05\n      a\n      b\n    \n    \n      6610\n      \n      27.0\n      2015-03-13\n      2015-03-24\n      2015-03-25\n      2015-04-22\n      Recover\n      f\n      NaN\n      -13.216103\n      8.486663\n      6e8bba\n      other\n      6.0\n      months\n      4414\n      95.0\n      266.0\n      21.0\n      yes\n      no\n      no\n      no\n      yes\n      38.5\n      11:37\n      a\n      b"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#describe-the-dataframe-for-numerical-columns-only",
    "href": "Data Management/cleaning_data_and_core_functions.html#describe-the-dataframe-for-numerical-columns-only",
    "title": "Cleaning Data and Core Functions",
    "section": "Describe the Dataframe (for Numerical Columns Only)",
    "text": "Describe the Dataframe (for Numerical Columns Only)\n\nlinelist_raw.describe()\n\n\n\n\n\n  \n    \n      \n      generation\n      lon\n      lat\n      age\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      temp\n    \n  \n  \n    \n      count\n      6604.000000\n      6604.000000\n      6604.000000\n      6504.000000\n      6611.000000\n      6604.000000\n      6604.000000\n      6604.000000\n      6453.000000\n    \n    \n      mean\n      16.598274\n      -13.233829\n      8.469685\n      16.103629\n      3240.914688\n      52.693216\n      125.245003\n      21.262114\n      38.597102\n    \n    \n      std\n      5.714777\n      0.019447\n      0.011276\n      12.621254\n      1857.829718\n      18.589333\n      49.568585\n      1.665195\n      0.954342\n    \n    \n      min\n      0.000000\n      -13.272755\n      8.446206\n      0.000000\n      1.000000\n      -11.000000\n      4.000000\n      16.000000\n      35.200000\n    \n    \n      25%\n      13.000000\n      -13.251579\n      8.461235\n      6.000000\n      1647.500000\n      41.000000\n      91.000000\n      20.000000\n      38.300000\n    \n    \n      50%\n      16.000000\n      -13.229079\n      8.469072\n      13.000000\n      3241.000000\n      54.000000\n      130.000000\n      22.000000\n      38.800000\n    \n    \n      75%\n      20.000000\n      -13.216586\n      8.479571\n      23.000000\n      4836.500000\n      66.000000\n      159.000000\n      22.000000\n      39.200000\n    \n    \n      max\n      37.000000\n      -13.205224\n      8.491748\n      84.000000\n      6481.000000\n      111.000000\n      295.000000\n      26.000000\n      40.800000"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#rename-specific-columns",
    "href": "Data Management/cleaning_data_and_core_functions.html#rename-specific-columns",
    "title": "Cleaning Data and Core Functions",
    "section": "Rename Specific Columns",
    "text": "Rename Specific Columns\n\nlinelist_raw.columns\n\nIndex(['case_id', 'generation', 'infection date', 'date onset', 'hosp date', 'date_of_outcome', 'outcome', 'gender', 'hospital', 'lon', 'lat', 'infector', 'source', 'age', 'age_unit', 'row_num', 'wt_kg', 'ht_cm', 'ct_blood', 'fever', 'chills', 'cough', 'aches', 'vomit', 'temp', 'time_admission', 'merged_header', 'Unnamed: 27'], dtype='object')\n\n\n\nlinelist_raw = linelist_raw.rename(columns={'infection date': 'date_infection', \n                                            'hosp date': 'date_hospitalisation', \n                                            'date_of_outcome': 'date_outcome'})\nlinelist_raw.head(2)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      hospital\n      lon\n      lat\n      infector\n      source\n      age\n      age_unit\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      merged_header\n      Unnamed: 27\n    \n  \n  \n    \n      0\n      5fe599\n      4.0\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      2.0\n      years\n      1\n      27.0\n      48.0\n      22.0\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      a\n      b\n    \n    \n      1\n      8689b7\n      4.0\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      NaN\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      3.0\n      years\n      2\n      25.0\n      59.0\n      22.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      a\n      b"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#rename-by-column-index",
    "href": "Data Management/cleaning_data_and_core_functions.html#rename-by-column-index",
    "title": "Cleaning Data and Core Functions",
    "section": "Rename by Column Index",
    "text": "Rename by Column Index\nNote: In Python, the first element of a list is index 0 (not 1)\n\ndf_exp2 = linelist_raw.rename(columns={linelist_raw.columns[0]: 'CASE ID'}).head(1)\ndf_exp2\n\n\n\n\n\n  \n    \n      \n      CASE ID\n      generation\n      date_infection\n      date onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      hospital\n      lon\n      lat\n      infector\n      source\n      age\n      age_unit\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      merged_header\n      Unnamed: 27\n    \n  \n  \n    \n      0\n      5fe599\n      4.0\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      2.0\n      years\n      1\n      27.0\n      48.0\n      22.0\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      a\n      b"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#rename-all-columns-by-a-list",
    "href": "Data Management/cleaning_data_and_core_functions.html#rename-all-columns-by-a-list",
    "title": "Cleaning Data and Core Functions",
    "section": "Rename All Columns by a List",
    "text": "Rename All Columns by a List\nIn this example, convert the column to upper cases first.\n\ncol_name = linelist_raw.columns.to_list()\nlst = [x.upper() for x in col_name]\nlst\n\n['CASE_ID',\n 'GENERATION',\n 'DATE_INFECTION',\n 'DATE ONSET',\n 'DATE_HOSPITALISATION',\n 'DATE_OUTCOME',\n 'OUTCOME',\n 'GENDER',\n 'HOSPITAL',\n 'LON',\n 'LAT',\n 'INFECTOR',\n 'SOURCE',\n 'AGE',\n 'AGE_UNIT',\n 'ROW_NUM',\n 'WT_KG',\n 'HT_CM',\n 'CT_BLOOD',\n 'FEVER',\n 'CHILLS',\n 'COUGH',\n 'ACHES',\n 'VOMIT',\n 'TEMP',\n 'TIME_ADMISSION',\n 'MERGED_HEADER',\n 'UNNAMED: 27']\n\n\nAnd then, replace the upper cases list\n\ndf_df_exp3 = linelist_raw.head(2)\ndf_df_exp3.columns = lst\ndf_df_exp3\n\n\n\n\n\n  \n    \n      \n      CASE_ID\n      GENERATION\n      DATE_INFECTION\n      DATE ONSET\n      DATE_HOSPITALISATION\n      DATE_OUTCOME\n      OUTCOME\n      GENDER\n      HOSPITAL\n      LON\n      LAT\n      INFECTOR\n      SOURCE\n      AGE\n      AGE_UNIT\n      ROW_NUM\n      WT_KG\n      HT_CM\n      CT_BLOOD\n      FEVER\n      CHILLS\n      COUGH\n      ACHES\n      VOMIT\n      TEMP\n      TIME_ADMISSION\n      MERGED_HEADER\n      UNNAMED: 27\n    \n  \n  \n    \n      0\n      5fe599\n      4.0\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      2.0\n      years\n      1\n      27.0\n      48.0\n      22.0\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      a\n      b\n    \n    \n      1\n      8689b7\n      4.0\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      NaN\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      3.0\n      years\n      2\n      25.0\n      59.0\n      22.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      a\n      b"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#replace-specific-characters-in-columns",
    "href": "Data Management/cleaning_data_and_core_functions.html#replace-specific-characters-in-columns",
    "title": "Cleaning Data and Core Functions",
    "section": "Replace Specific Characters in Columns",
    "text": "Replace Specific Characters in Columns\n\ndf_exp4 = linelist_raw.head(2)\ndf_exp4.columns = df_exp4.columns.str.replace('lon', 'longitude')\ndf_exp4\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      hospital\n      longitude\n      lat\n      infector\n      source\n      age\n      age_unit\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      merged_header\n      Unnamed: 27\n    \n  \n  \n    \n      0\n      5fe599\n      4.0\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      2.0\n      years\n      1\n      27.0\n      48.0\n      22.0\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      a\n      b\n    \n    \n      1\n      8689b7\n      4.0\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      NaN\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      3.0\n      years\n      2\n      25.0\n      59.0\n      22.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      a\n      b"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#select-specific-columns",
    "href": "Data Management/cleaning_data_and_core_functions.html#select-specific-columns",
    "title": "Cleaning Data and Core Functions",
    "section": "Select Specific Columns",
    "text": "Select Specific Columns\n\ndf_exp5 = linelist_raw[['case_id', 'date onset', 'date_hospitalisation', 'fever']]\ndf_exp5.head(2)\n\n\n\n\n\n  \n    \n      \n      case_id\n      date onset\n      date_hospitalisation\n      fever\n    \n  \n  \n    \n      0\n      5fe599\n      2014-05-13\n      2014-05-15\n      no\n    \n    \n      1\n      8689b7\n      2014-05-13\n      2014-05-14\n      NaN"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#select-numeric-columns-only",
    "href": "Data Management/cleaning_data_and_core_functions.html#select-numeric-columns-only",
    "title": "Cleaning Data and Core Functions",
    "section": "Select Numeric Columns Only",
    "text": "Select Numeric Columns Only\n\nlinelist_raw[linelist_raw.describe().columns.tolist()].head(2)\n\n\n\n\n\n  \n    \n      \n      generation\n      lon\n      lat\n      age\n      row_num\n      wt_kg\n      ht_cm\n      ct_blood\n      temp\n    \n  \n  \n    \n      0\n      4.0\n      -13.215735\n      8.468973\n      2.0\n      1\n      27.0\n      48.0\n      22.0\n      36.8\n    \n    \n      1\n      4.0\n      -13.215234\n      8.451719\n      3.0\n      2\n      25.0\n      59.0\n      22.0\n      36.9"
  },
  {
    "objectID": "Data Management/cleaning_data_and_core_functions.html#select-columns-if-contain-specific-information",
    "href": "Data Management/cleaning_data_and_core_functions.html#select-columns-if-contain-specific-information",
    "title": "Cleaning Data and Core Functions",
    "section": "Select Columns if Contain Specific Information",
    "text": "Select Columns if Contain Specific Information\n\nlinelist_raw.filter(regex='date').head(2)\n\n\n\n\n\n  \n    \n      \n      date_infection\n      date onset\n      date_hospitalisation\n      date_outcome\n    \n  \n  \n    \n      0\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n    \n    \n      1\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n    \n  \n\n\n\n\n\nlinelist_raw.filter(regex='onset|hosp|fev')\n\n\n\n\n\n  \n    \n      \n      date onset\n      date_hospitalisation\n      hospital\n      fever\n    \n  \n  \n    \n      0\n      2014-05-13\n      2014-05-15\n      Other\n      no\n    \n    \n      1\n      2014-05-13\n      2014-05-14\n      NaN\n      NaN\n    \n    \n      2\n      2014-05-16\n      2014-05-18\n      St. Mark's Maternity Hospital (SMMH)\n      NaN\n    \n    \n      3\n      2014-05-18\n      2014-05-20\n      Port Hospital\n      no\n    \n    \n      4\n      2014-05-21\n      2014-05-22\n      Military Hospital\n      no\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      6606\n      2014-08-24\n      2014-08-25\n      Port Hospital\n      yes\n    \n    \n      6607\n      2014-09-09\n      2014-09-10\n      NaN\n      yes\n    \n    \n      6608\n      2015-01-28\n      2015-01-28\n      NaN\n      yes\n    \n    \n      6609\n      2014-10-03\n      2014-10-05\n      Central Hospital\n      yes\n    \n    \n      6610\n      2015-03-24\n      2015-03-25\n      NaN\n      yes\n    \n  \n\n6611 rows × 4 columns"
  },
  {
    "objectID": "Data Management/working_with_dates.html",
    "href": "Data Management/working_with_dates.html",
    "title": "Working with Dates",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style"
  },
  {
    "objectID": "Data Management/working_with_dates.html#data",
    "href": "Data Management/working_with_dates.html#data",
    "title": "Working with Dates",
    "section": "Data",
    "text": "Data\nImport data from https://github.com/appliedepi/epiRhandbook_eng/blob/master/data/linelist_cleaned.xlsx and then save under “epiRhandbook_data” folder.\nNote: Installation of “openpyxl” is required.\n\nlinelist = pd.read_excel('../epiRhandbook_data/linelist_cleaned.xlsx')\nlinelist.head(3)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date_onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      age\n      age_unit\n      age_years\n      age_cat\n      age_cat5\n      hospital\n      lon\n      lat\n      infector\n      source\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      bmi\n      days_onset_hosp\n    \n  \n  \n    \n      0\n      5fe599\n      4\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      2.0\n      years\n      2.0\n      0-4\n      0-4\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      27\n      48\n      22\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      117.187500\n      2.0\n    \n    \n      1\n      8689b7\n      4\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Missing\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      25\n      59\n      22\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      71.818443\n      1.0\n    \n    \n      2\n      11f8ea\n      2\n      NaT\n      2014-05-16\n      2014-05-18\n      2014-05-30\n      Recover\n      m\n      56.0\n      years\n      56.0\n      50-69\n      55-59\n      St. Mark's Maternity Hospital (SMMH)\n      -13.212911\n      8.464817\n      NaN\n      NaN\n      91\n      238\n      21\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      16:48\n      16.065250\n      2.0"
  },
  {
    "objectID": "Data Management/working_with_dates.html#current-date",
    "href": "Data Management/working_with_dates.html#current-date",
    "title": "Working with Dates",
    "section": "Current Date",
    "text": "Current Date\nPrint system date and time using Linux comment (starting with !)\n\n!date\n\nThu  5 Jan 10:50:30 AWST 2023"
  },
  {
    "objectID": "Data Management/working_with_dates.html#convert-to-date",
    "href": "Data Management/working_with_dates.html#convert-to-date",
    "title": "Working with Dates",
    "section": "Convert to Date",
    "text": "Convert to Date\n\nReading date columns (use parse_dates to specify the columns if necessary)\n\ndf_date = pd.read_excel('../epiRhandbook_data/linelist_cleaned.xlsx', \n                        parse_dates=['date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome', 'time_admission'])\ndf_date.head(3)\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date_onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      age\n      age_unit\n      age_years\n      age_cat\n      age_cat5\n      hospital\n      lon\n      lat\n      infector\n      source\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      bmi\n      days_onset_hosp\n    \n  \n  \n    \n      0\n      5fe599\n      4\n      2014-05-08\n      2014-05-13\n      2014-05-15\n      NaT\n      NaN\n      m\n      2.0\n      years\n      2.0\n      0-4\n      0-4\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      27\n      48\n      22\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      117.187500\n      2.0\n    \n    \n      1\n      8689b7\n      4\n      NaT\n      2014-05-13\n      2014-05-14\n      2014-05-18\n      Recover\n      f\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Missing\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      25\n      59\n      22\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      71.818443\n      1.0\n    \n    \n      2\n      11f8ea\n      2\n      NaT\n      2014-05-16\n      2014-05-18\n      2014-05-30\n      Recover\n      m\n      56.0\n      years\n      56.0\n      50-69\n      55-59\n      St. Mark's Maternity Hospital (SMMH)\n      -13.212911\n      8.464817\n      NaN\n      NaN\n      91\n      238\n      21\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      16:48\n      16.065250\n      2.0\n    \n  \n\n\n\n\n\n\nCustomizing a Date Time using dt\n\ndf_dp = pd.read_excel('../epiRhandbook_data/linelist_cleaned.xlsx')\ndf_dp['date_infection'] = df_dp['date_infection'].dt.strftime('%Y-%m-%d')  # YYYY-MM-DD\ndf_dp['date_onset'] = df_dp['date_onset'].dt.strftime('%b/%d/%y')  # MMM-DD-YY\ndf_dp['date_hospitalisation'] = df_dp['date_hospitalisation'].dt.strftime('%a %b/%d/%Y')  # DDD DD/MM/YYYY\ndf_dp.head()\n\n\n\n\n\n  \n    \n      \n      case_id\n      generation\n      date_infection\n      date_onset\n      date_hospitalisation\n      date_outcome\n      outcome\n      gender\n      age\n      age_unit\n      age_years\n      age_cat\n      age_cat5\n      hospital\n      lon\n      lat\n      infector\n      source\n      wt_kg\n      ht_cm\n      ct_blood\n      fever\n      chills\n      cough\n      aches\n      vomit\n      temp\n      time_admission\n      bmi\n      days_onset_hosp\n    \n  \n  \n    \n      0\n      5fe599\n      4\n      2014-05-08\n      May/13/14\n      Thu May/15/2014\n      NaT\n      NaN\n      m\n      2.0\n      years\n      2.0\n      0-4\n      0-4\n      Other\n      -13.215735\n      8.468973\n      f547d6\n      other\n      27\n      48\n      22\n      no\n      no\n      yes\n      no\n      yes\n      36.8\n      NaN\n      117.187500\n      2.0\n    \n    \n      1\n      8689b7\n      4\n      NaN\n      May/13/14\n      Wed May/14/2014\n      2014-05-18\n      Recover\n      f\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Missing\n      -13.215234\n      8.451719\n      NaN\n      NaN\n      25\n      59\n      22\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      09:36\n      71.818443\n      1.0\n    \n    \n      2\n      11f8ea\n      2\n      NaN\n      May/16/14\n      Sun May/18/2014\n      2014-05-30\n      Recover\n      m\n      56.0\n      years\n      56.0\n      50-69\n      55-59\n      St. Mark's Maternity Hospital (SMMH)\n      -13.212911\n      8.464817\n      NaN\n      NaN\n      91\n      238\n      21\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      36.9\n      16:48\n      16.065250\n      2.0\n    \n    \n      3\n      b8812a\n      3\n      2014-05-04\n      May/18/14\n      Tue May/20/2014\n      NaT\n      NaN\n      f\n      18.0\n      years\n      18.0\n      15-19\n      15-19\n      Port Hospital\n      -13.236371\n      8.475476\n      f90f5f\n      other\n      41\n      135\n      23\n      no\n      no\n      no\n      no\n      no\n      36.8\n      11:22\n      22.496571\n      2.0\n    \n    \n      4\n      893f25\n      3\n      2014-05-18\n      May/21/14\n      Thu May/22/2014\n      2014-05-29\n      Recover\n      m\n      3.0\n      years\n      3.0\n      0-4\n      0-4\n      Military Hospital\n      -13.222864\n      8.460824\n      11f8ea\n      other\n      36\n      71\n      23\n      no\n      no\n      yes\n      no\n      yes\n      36.9\n      12:60\n      71.414402\n      1.0\n    \n  \n\n\n\n\nTips: For the full list of strftime and strptime format codes, see https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\nTo convert a 2-digit year into a 4-digit year (all in the same century)\n\ntwo_digit_years = [\"15\", \"15\", \"16\", \"17\"]\n['20'+yy for yy in two_digit_years]\n\n['2015', '2015', '2016', '2017']\n\n\n\n\nCombine columns to create a date column\n\ndd = [1,2,3]\nmm = [5,6,7]\nyy = [21, 22, 23]\ndf = pd.DataFrame(list(zip(dd, mm, yy)), columns = ['dd', 'mm', 'yy'])\ndf\n\n\n\n\n\n  \n    \n      \n      dd\n      mm\n      yy\n    \n  \n  \n    \n      0\n      1\n      5\n      21\n    \n    \n      1\n      2\n      6\n      22\n    \n    \n      2\n      3\n      7\n      23\n    \n  \n\n\n\n\n\ndf['yy-mm-dd'] = pd.to_datetime(df['dd'].astype(str) + \"-\" + \n                                df['mm'].astype(str) + \"-\" + \n                                df['yy'].astype(str))\ndf\n\n\n\n\n\n  \n    \n      \n      dd\n      mm\n      yy\n      yy-mm-dd\n    \n  \n  \n    \n      0\n      1\n      5\n      21\n      2021-01-05\n    \n    \n      1\n      2\n      6\n      22\n      2022-02-06\n    \n    \n      2\n      3\n      7\n      23\n      2023-03-07"
  },
  {
    "objectID": "Data Management/working_with_dates.html#excel-dates",
    "href": "Data Management/working_with_dates.html#excel-dates",
    "title": "Working with Dates",
    "section": "Excel Dates",
    "text": "Excel Dates\nIf the dataset you imported from Excel shows dates as numbers or characters like “41369”, add origin = '1899-12-30' when reading the file.\n\ndate = [41369, 41370, 41371]\n\n\ndf = pd.DataFrame(list(date), columns = ['Excel_date'])\ndf.to_excel('Excel_date.xlsx', index=False)\n\n\ndf = pd.read_excel('Excel_date.xlsx', index_col=False)\ndf['date'] = pd.to_datetime(df['Excel_date'], unit='d', origin='1899-12-30')\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      Excel_date\n      date\n    \n  \n  \n    \n      0\n      41369\n      2013-04-05\n    \n    \n      1\n      41370\n      2013-04-06\n    \n    \n      2\n      41371\n      2013-04-07"
  },
  {
    "objectID": "Data Management/working_with_dates.html#messy-dates",
    "href": "Data Management/working_with_dates.html#messy-dates",
    "title": "Working with Dates",
    "section": "Messy Dates",
    "text": "Messy Dates\n\nm_dates = (\"03 January 2018\", \"07/03/1982\", \"08/20/85\")\ndf = pd.DataFrame(list(m_dates), columns = ['Messy_date'])\ndf['date'] = pd.to_datetime(df['Messy_date'])\ndf\n\n\n\n\n\n  \n    \n      \n      Messy_date\n      date\n    \n  \n  \n    \n      0\n      03 January 2018\n      2018-01-03\n    \n    \n      1\n      07/03/1982\n      1982-07-03\n    \n    \n      2\n      08/20/85\n      1985-08-20"
  },
  {
    "objectID": "Data Management/working_with_dates.html#convert-times-alone",
    "href": "Data Management/working_with_dates.html#convert-times-alone",
    "title": "Working with Dates",
    "section": "Convert times alone",
    "text": "Convert times alone\n\ntime1 = \"13:45\"\ntime2 = \"15:20\"\n\nfrom datetime import datetime, timedelta\n\n\nt1 = datetime.strptime(time1, '%H:%M')\nt1\n\ndatetime.datetime(1900, 1, 1, 13, 45)\n\n\n\nt2 = datetime.strptime(time2, '%H:%M')\nt2\n\ndatetime.datetime(1900, 1, 1, 15, 20)\n\n\n\nT=(t2-t1)\nT\n\ndatetime.timedelta(seconds=5700)\n\n\n\n5700/60/60\n\n1.5833333333333333\n\n\n\ndef format_timedelta(td):\n    minutes, seconds = divmod(td.seconds + td.days * 86400, 60)\n    hours, minutes = divmod(minutes, 60)\n    return '{:d}:{:02d}:{:02d}'.format(hours, minutes, seconds)\n\n\nformat_timedelta(T)\n\n'1:35:00'\n\n\nAlternatively, including microseconds\n\ndef format_timedelta(td):\n    minutes, seconds = divmod(td.seconds + td.days * 86400, 60)\n    hours, minutes = divmod(minutes, 60)\n    return '{:d}:{:02d}:{:02d}.{:06d}'.format(hours, minutes, seconds, td.microseconds)\n\n\nformat_timedelta(T)\n\n'1:35:00.000000'"
  },
  {
    "objectID": "Data Management/working_with_dates.html#extract-time",
    "href": "Data Management/working_with_dates.html#extract-time",
    "title": "Working with Dates",
    "section": "Extract time",
    "text": "Extract time\n\nhh = list()\nfor i, r in enumerate(linelist['time_admission']):\n    try:\n        h = int(r[:2])\n        if (h > 6) & (h < 12):\n            hh.append(\"Morning\")\n        elif (h >= 12) & (h <17):\n            hh.append(\"Afternoon\")\n        elif (h >=17) & (h < 21):\n            hh.append(\"Evening\")\n        else:\n            hh.append(\"Night\")\n    except:\n        hh.append(\"No info\")\n\n\nlen(hh)\n\n5888\n\n\n\nm = 0\na = 0\ne = 0\nn = 0\nni = 0\nfor i in hh:\n    if i == \"Morning\":\n        m+=1\n    elif i == \"Afternoon\":\n        a += 1\n    elif i == \"Evening\":\n        e += 1\n    elif i == \"Night\":\n        n += 1\n    elif i == \"No info\":\n        ni += 1\n\n\nm, a, e, n, ni, m+a+e+n+ni\n\n(1596, 2312, 823, 392, 765, 5888)"
  },
  {
    "objectID": "Data Management/working_with_dates.html#extract-date-components",
    "href": "Data Management/working_with_dates.html#extract-date-components",
    "title": "Working with Dates",
    "section": "Extract Date Components",
    "text": "Extract Date Components\n\nexample_date.month  # month number\n\n1\n\n\n\nexample_date.year  # year\n\n2023\n\n\n\nexample_date.day  # day (number) of the month\n\n4\n\n\n\nexample_date.weekday()  # `()` is required in this case  2 == Wednesday\n\n2\n\n\nTo display the date in English\n\nimport calendar\nmy_date = datetime.today()\ncalendar.day_name[my_date.weekday()]\n\n'Thursday'"
  },
  {
    "objectID": "Data Management/working_with_dates.html#date-math",
    "href": "Data Management/working_with_dates.html#date-math",
    "title": "Working with Dates",
    "section": "Date Math",
    "text": "Date Math\n\nexample_date + timedelta(days=3)\n\ndatetime.datetime(2023, 1, 7, 0, 0)\n\n\n\nexample_date + timedelta(weeks=2, days=-2)\n\ndatetime.datetime(2023, 1, 16, 0, 0)"
  },
  {
    "objectID": "Data Management/working_with_dates.html#date-intervals",
    "href": "Data Management/working_with_dates.html#date-intervals",
    "title": "Working with Dates",
    "section": "Date intervals",
    "text": "Date intervals\n\noutput = example_date - datetime.strptime(\"2022-02-20\", '%Y-%m-%d')\noutput\n\ndatetime.timedelta(days=318)\n\n\n\ndf_di = linelist[['date_onset', 'date_hospitalisation']]\ndf_di.head()\n\n\n\n\n\n  \n    \n      \n      date_onset\n      date_hospitalisation\n    \n  \n  \n    \n      0\n      2014-05-13\n      2014-05-15\n    \n    \n      1\n      2014-05-13\n      2014-05-14\n    \n    \n      2\n      2014-05-16\n      2014-05-18\n    \n    \n      3\n      2014-05-18\n      2014-05-20\n    \n    \n      4\n      2014-05-21\n      2014-05-22\n    \n  \n\n\n\n\n\ndf_march = df_di[df_di['date_onset'].dt.month == 3]\ndf_march\n\n\n\n\n\n  \n    \n      \n      date_onset\n      date_hospitalisation\n    \n  \n  \n    \n      993\n      2015-03-01\n      2015-03-02\n    \n    \n      994\n      2015-03-01\n      2015-03-02\n    \n    \n      995\n      2015-03-01\n      2015-03-01\n    \n    \n      996\n      2015-03-02\n      2015-03-04\n    \n    \n      997\n      2015-03-02\n      2015-03-03\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      5864\n      2015-03-26\n      2015-03-29\n    \n    \n      5865\n      2015-03-27\n      2015-03-30\n    \n    \n      5866\n      2015-03-27\n      2015-03-31\n    \n    \n      5867\n      2015-03-27\n      2015-03-30\n    \n    \n      5868\n      2015-03-30\n      2015-04-02\n    \n  \n\n277 rows × 2 columns\n\n\n\n\ndf_mar = df_march.copy(deep=True)\n\n\ndf_mar.notnull()\n\n\n\n\n\n  \n    \n      \n      date_onset\n      date_hospitalisation\n    \n  \n  \n    \n      993\n      True\n      True\n    \n    \n      994\n      True\n      True\n    \n    \n      995\n      True\n      True\n    \n    \n      996\n      True\n      True\n    \n    \n      997\n      True\n      True\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      5864\n      True\n      True\n    \n    \n      5865\n      True\n      True\n    \n    \n      5866\n      True\n      True\n    \n    \n      5867\n      True\n      True\n    \n    \n      5868\n      True\n      True\n    \n  \n\n277 rows × 2 columns\n\n\n\n\ndf_mar['days_onset_to_hosp'] = df_mar['date_hospitalisation'] - df_mar['date_onset']\ndf_mar\n\n\n\n\n\n  \n    \n      \n      date_onset\n      date_hospitalisation\n      days_onset_to_hosp\n    \n  \n  \n    \n      993\n      2015-03-01\n      2015-03-02\n      1 days\n    \n    \n      994\n      2015-03-01\n      2015-03-02\n      1 days\n    \n    \n      995\n      2015-03-01\n      2015-03-01\n      0 days\n    \n    \n      996\n      2015-03-02\n      2015-03-04\n      2 days\n    \n    \n      997\n      2015-03-02\n      2015-03-03\n      1 days\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      5864\n      2015-03-26\n      2015-03-29\n      3 days\n    \n    \n      5865\n      2015-03-27\n      2015-03-30\n      3 days\n    \n    \n      5866\n      2015-03-27\n      2015-03-31\n      4 days\n    \n    \n      5867\n      2015-03-27\n      2015-03-30\n      3 days\n    \n    \n      5868\n      2015-03-30\n      2015-04-02\n      3 days\n    \n  \n\n277 rows × 3 columns\n\n\n\n\ndf_mar['days_onset_to_hosp'].median(skipna=True)\n\nTimedelta('1 days 00:00:00')\n\n\n\ndf_mar['days_onset_to_hosp'].median()\n\nTimedelta('1 days 00:00:00')"
  },
  {
    "objectID": "Data Management/working_with_dates.html#month-year",
    "href": "Data Management/working_with_dates.html#month-year",
    "title": "Working with Dates",
    "section": "Month-year",
    "text": "Month-year\n\ns = pd.Series(linelist['date_onset'])\n\n# Convert the values in the series to datetime objects\ns = pd.to_datetime(s)\n\n# Extract the month and year from the datetime values\ns = s.dt.strftime('%b %Y')\n\n# Count the number of occurrences of each unique value\ncounts = s.value_counts()\n\n# Sort the counts by the month and year\ncounts = counts.sort_index()\n\n# Reset the index of the counts, so that the unique values become columns\ncounts = counts.reset_index()\n\n# Rename the columns\ncounts.columns = ['month_year', 'count']\n\ncounts\n\n\n\n\n\n  \n    \n      \n      month_year\n      count\n    \n  \n  \n    \n      0\n      Apr 2014\n      7\n    \n    \n      1\n      Apr 2015\n      186\n    \n    \n      2\n      Aug 2014\n      528\n    \n    \n      3\n      Dec 2014\n      562\n    \n    \n      4\n      Feb 2015\n      306\n    \n    \n      5\n      Jan 2015\n      431\n    \n    \n      6\n      Jul 2014\n      226\n    \n    \n      7\n      Jun 2014\n      100\n    \n    \n      8\n      Mar 2015\n      277\n    \n    \n      9\n      May 2014\n      64\n    \n    \n      10\n      Nov 2014\n      763\n    \n    \n      11\n      Oct 2014\n      1112\n    \n    \n      12\n      Sep 2014\n      1070\n    \n  \n\n\n\n\nSort by month\n\ndf = pd.DataFrame(counts)\ndf['month_year'] = pd.to_datetime(df['month_year'])\ndf.sort_values(by='month_year')\n\n\n\n\n\n  \n    \n      \n      month_year\n      count\n    \n  \n  \n    \n      0\n      2014-04-01\n      7\n    \n    \n      9\n      2014-05-01\n      64\n    \n    \n      7\n      2014-06-01\n      100\n    \n    \n      6\n      2014-07-01\n      226\n    \n    \n      2\n      2014-08-01\n      528\n    \n    \n      12\n      2014-09-01\n      1070\n    \n    \n      11\n      2014-10-01\n      1112\n    \n    \n      10\n      2014-11-01\n      763\n    \n    \n      3\n      2014-12-01\n      562\n    \n    \n      5\n      2015-01-01\n      431\n    \n    \n      4\n      2015-02-01\n      306\n    \n    \n      8\n      2015-03-01\n      277\n    \n    \n      1\n      2015-04-01\n      186"
  },
  {
    "objectID": "Data Management/working_with_dates.html#epidemiological-weeks",
    "href": "Data Management/working_with_dates.html#epidemiological-weeks",
    "title": "Working with Dates",
    "section": "Epidemiological weeks",
    "text": "Epidemiological weeks\n\ndf[\"date_onset\"] = pd.to_datetime(df_date[\"date_onset\"])\n\n# Shift the dates back 7 days and extract the ISO week number and year from each date\ndf[\"date_onset\"] -= pd.to_timedelta(7, unit='d')\ndf[\"WeekNumber\"] = df[\"date_onset\"].dt.isocalendar().week\ndf[\"Year\"] = df[\"date_onset\"].dt.year\n\n# Convert the week numbers to dates and add them to the DataFrame\ndf[\"week_started\"] = df.apply(lambda row: date.fromisocalendar(row[\"Year\"], row[\"WeekNumber\"], 7), axis=1)\n\n# Count the number of cases per week and create a new DataFrame\nn = df[\"week_started\"].value_counts().sort_index().reset_index()\nn.columns = [\"week_started\", \"weekly_cases\"]\nn\n\n\n\n\n\n  \n    \n      \n      week_started\n      weekly_cases\n    \n  \n  \n    \n      0\n      2014-01-05\n      49\n    \n    \n      1\n      2014-04-06\n      1\n    \n    \n      2\n      2014-04-13\n      1\n    \n    \n      3\n      2014-04-20\n      5\n    \n    \n      4\n      2014-04-27\n      4\n    \n    \n      5\n      2014-05-04\n      12\n    \n    \n      6\n      2014-05-11\n      17\n    \n    \n      7\n      2014-05-18\n      13\n    \n    \n      8\n      2014-05-25\n      18\n    \n    \n      9\n      2014-06-01\n      22\n    \n    \n      10\n      2014-06-08\n      22\n    \n    \n      11\n      2014-06-15\n      29\n    \n    \n      12\n      2014-06-22\n      21\n    \n    \n      13\n      2014-06-29\n      32\n    \n    \n      14\n      2014-07-06\n      38\n    \n    \n      15\n      2014-07-13\n      60\n    \n    \n      16\n      2014-07-20\n      59\n    \n    \n      17\n      2014-07-27\n      81\n    \n    \n      18\n      2014-08-03\n      86\n    \n    \n      19\n      2014-08-10\n      114\n    \n    \n      20\n      2014-08-17\n      134\n    \n    \n      21\n      2014-08-24\n      156\n    \n    \n      22\n      2014-08-31\n      195\n    \n    \n      23\n      2014-09-07\n      222\n    \n    \n      24\n      2014-09-14\n      304\n    \n    \n      25\n      2014-09-21\n      265\n    \n    \n      26\n      2014-09-28\n      281\n    \n    \n      27\n      2014-10-05\n      250\n    \n    \n      28\n      2014-10-12\n      248\n    \n    \n      29\n      2014-10-19\n      247\n    \n    \n      30\n      2014-10-26\n      244\n    \n    \n      31\n      2014-11-02\n      205\n    \n    \n      32\n      2014-11-09\n      178\n    \n    \n      33\n      2014-11-16\n      148\n    \n    \n      34\n      2014-11-23\n      158\n    \n    \n      35\n      2014-11-30\n      154\n    \n    \n      36\n      2014-12-07\n      128\n    \n    \n      37\n      2014-12-14\n      120\n    \n    \n      38\n      2014-12-21\n      115\n    \n    \n      39\n      2014-12-28\n      94\n    \n    \n      40\n      2015-01-04\n      53\n    \n    \n      41\n      2015-01-11\n      108\n    \n    \n      42\n      2015-01-18\n      96\n    \n    \n      43\n      2015-01-25\n      86\n    \n    \n      44\n      2015-02-01\n      81\n    \n    \n      45\n      2015-02-08\n      65\n    \n    \n      46\n      2015-02-15\n      83\n    \n    \n      47\n      2015-02-22\n      78\n    \n    \n      48\n      2015-03-01\n      73\n    \n    \n      49\n      2015-03-08\n      65\n    \n    \n      50\n      2015-03-15\n      63\n    \n    \n      51\n      2015-03-22\n      51\n    \n    \n      52\n      2015-03-29\n      54\n    \n    \n      53\n      2015-04-05\n      42\n    \n    \n      54\n      2015-04-12\n      45\n    \n    \n      55\n      2015-04-19\n      40\n    \n    \n      56\n      2015-04-26\n      19\n    \n  \n\n\n\n\nUsing Epiweek as an alternative to fromisocalendar, see https://pypi.org/project/epiweeks/"
  },
  {
    "objectID": "Data Management/working_with_dates.html#lagging-and-leading-calculation",
    "href": "Data Management/working_with_dates.html#lagging-and-leading-calculation",
    "title": "Working with Dates",
    "section": "Lagging and Leading Calculation",
    "text": "Lagging and Leading Calculation\n\nn.head()\n\n\n\n\n\n  \n    \n      \n      week_started\n      weekly_cases\n    \n  \n  \n    \n      0\n      2014-01-05\n      49\n    \n    \n      1\n      2014-04-06\n      1\n    \n    \n      2\n      2014-04-13\n      1\n    \n    \n      3\n      2014-04-20\n      5\n    \n    \n      4\n      2014-04-27\n      4\n    \n  \n\n\n\n\n\nn['lagged_week'] = n['weekly_cases'].shift(periods=1)\nn['lead_week'] = n['weekly_cases'].shift(periods=-1)\nn.head()\n\n\n\n\n\n  \n    \n      \n      week_started\n      weekly_cases\n      lagged_week\n      lead_week\n    \n  \n  \n    \n      0\n      2014-01-05\n      49\n      NaN\n      1.0\n    \n    \n      1\n      2014-04-06\n      1\n      49.0\n      1.0\n    \n    \n      2\n      2014-04-13\n      1\n      1.0\n      5.0\n    \n    \n      3\n      2014-04-20\n      5\n      1.0\n      4.0\n    \n    \n      4\n      2014-04-27\n      4\n      5.0\n      12.0"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Download data",
    "section": "",
    "text": "see https://github.com/appliedepi/epiRhandbook_eng/tree/master/data\nFiles used:\nlinelist_raw.xlsx\nlinelist_clearned.xlsx\nThe files are saved under nbs/epiRhandbook_data in this repository."
  }
]